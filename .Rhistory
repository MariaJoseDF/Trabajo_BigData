# Eliminar signos en las columnas
tCPCL[,3] <- gsub("[.]", "", tCPCL[,3])
tCPCL[,3] <- gsub("[,]", ".", tCPCL[,3])
tCPCL[,4] <- gsub("[$]","", tCPCL[,4])
tCPCL[,4] <- gsub("[,]", ".", tCPCL[,4])
tCPCL[,4] <- gsub("[B]", "", tCPCL[,4])
tCPCL[,5] <- gsub("[$]", "", tCPCL[,5])
tCPCL[,5] <- gsub("[,]", ".", tCPCL[,5])
tCPCL[,5] <- gsub("[B]", "", tCPCL[,5])
tCPCL[,5] <- gsub("[M]", "", tCPCL[,5])
tCPCL[,6] <- gsub("[%]", "", tCPCL[,6])
tCPCL[,6] <- gsub("[,]", ".", tCPCL[,6])
tCPCL[,7] <- gsub("[%]", "", tCPCL[,7])
tCPCL[,7] <- gsub("[,]", ".", tCPCL[,7])
tCPCL[,8] <- gsub("[%]", "", tCPCL[,8])
tCPCL[,8] <- gsub("[,]", ".", tCPCL[,8])
# Conocer que tipo de variable corresponden las de la tabla
typeof(tCPCL[["Nombre"]])
typeof(tCPCL[["Precio (USD)"]])
typeof(tCPCL[["Cap. mercado ($) (M)"]])
typeof(tCPCL[["Vol. (24h) ($) (M)"]])
typeof(tCPCL[["Vol. total (%)"]])
typeof(tCPCL[["Var. (24h) (%)"]])
typeof(tCPCL[["Var. (7d) (%)"]])
#Cambiar tipo de variable de caracter a numero
tCPCL[["Precio (USD)"]] <- as.numeric(tCPCL[["Precio (USD)"]])
typeof(tCPCL[["Precio (USD)"]])
tCPCL[["Cap. mercado ($) (M)"]] <- as.numeric(tCPCL[["Cap. mercado ($) (M)"]])
typeof(tCPCL[["Cap. mercado ($) (M)"]])
tCPCL[["Vol. (24h) ($) (M)"]] <- as.numeric(tCPCL[["Vol. (24h) ($) (M)"]])
typeof(tCPCL[["Vol. (24h) ($) (M)"]])
tCPCL[["Vol. total (%)"]] <- as.numeric(tCPCL[["Vol. total (%)"]])
typeof(tCPCL[["Vol. total (%)"]])
# Cambiar variable 4 a millones
tCPCL[,4] <- tCPCL[,4]*1000
tCPCL[1,5] <- tCPCL[1,5]*1000
tCPCL[2,5] <- tCPCL[2,5]*1000
tCPCL[3,5] <- tCPCL[3,5]*1000
tCPCL[4,5] <- tCPCL[4,5]*1000
tCPCL[5,5] <- tCPCL[5,5]*1000
tCPCL[6,5] <- tCPCL[6,5]*1000
tCPCL[7,5] <- tCPCL[7,5]*1000
tCPCL[8,5] <- tCPCL[8,5]*1000
tCPCL[10,5] <- tCPCL[10,5]*1000
#Lectura de pagina con la informacion requerida
broker <- read_html("https://www.brokeronline.es/criptomonedas/ranking/")
#Creando variable que contiene la informacion a obtener
contenedoranking <- html_nodes(broker,xpath = "//*[@id=\"post-13673\"]/div")
#Obetiendo divs con la informacion a extraer
InfoRanking <- html_nodes(contenedoranking, css = ".td-width-content")
#Creando variables booleanas para la extraccion de la informacion
Lanzamiento <- FALSE
CapMercado <- FALSE
CantMax <- FALSE
#Creando variables para el almacenamiento de la informacion extraida
LaunchDate <- c()
MarketShare <- c()
Quantity <- c()
#Obteniendo nombres de criptomonedas
N <- html_nodes(contenedoranking, css = ".col-xs-12.text-center")
##Transformando a texto los nombres extraidos
TxtN <- html_text(N)
##Limpiando la información
TxtN <- gsub("\n","",TxtN)
TxtN <- gsub("\t","", TxtN)
##Eliminando espacios vacios dentro del vector de nombres por medio de un Loop
for (i in 1:length(TxtN)) {
if(TxtN[i] == ""){
TxtN <- TxtN[-i]
}
}
#Creación de Loop para la extracción de la información
for (i in InfoRanking) {
L <- html_nodes(i, css = ".col-xs-12 > p")
for (a in L) {
Txta <- html_text(a)
if(Lanzamiento){
print(Txta)
LaunchDate <- c(LaunchDate,Txta)
Lanzamiento <- FALSE
}
if(Txta == "Lanzamiento"){
Lanzamiento <- TRUE
}
}
for (b in L) {
Txtb <- html_text(b)
if(CapMercado){
print(Txtb)
MarketShare <- c(MarketShare,Txtb)
CapMercado <- FALSE
}
if(Txtb == "Capacidad de mercado"){
CapMercado <- TRUE
}
}
for (c in L) {
Txtc <- html_text(c)
if(CantMax){
print(Txtc)
Quantity <- c(Quantity,Txtc)
CantMax <- FALSE
}
if(Txtc == "Cantidad máxima"){
CantMax <- TRUE
}
}
}
#Creacion de data frame con la informacion extraída
Criptomonedas <- data.frame("Criptomoneda" = TxtN,"Lanzamiento" = LaunchDate, "Capacidad de mercado" = MarketShare, "Cantidad maxima" = Quantity)
#################################################################################33
#Cambiando las variables capacacidad de mercado por numeros enteros
Criptomonedas[,3]<-gsub("En torno al","",Criptomonedas[,3])
Criptomonedas[,3]<-gsub("Menos del","",Criptomonedas[,3])
Criptomonedas [,3]<-gsub("[%]","",Criptomonedas[,3])
#Cambiando nombre de la tabla Capacodad.de.mercado por Capacidad.de.mercado (%)
Criptomonedas<-rename(Criptomonedas,"Capacidad.de.mercado (%)"="Capacidad.de.mercado")
#Cambiando numeros a as.numeric
Criptomonedas[["Capacidad.de.mercado (%)"]]<-as.numeric(Criptomonedas[["Capacidad.de.mercado (%)"]])
typeof(Criptomonedas[["Capacidad.de.mercado (%)"]])
#Cambiar las variable Lanzamiento por solo año
Criptomonedas[,2]<-gsub("03.01.2009","2009",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("30.07.2015","2015",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("26.05.2020","2020",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("7.10.2011","2011",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("27.06.2017","2017",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("27.07.2017","2017",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("Noviembre 2014","2014",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("Septiembre 2017","2017",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("29.09.2017","2017",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("Planeado en 2020","2020",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("26.06.2017","2017",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("Abril 2014","2014",Criptomonedas[,2])
Criptomonedas[,2]<-gsub("09.09.2017","2017",Criptomonedas[,2])
#Cambiando nombre de la tabla lanzamiento por lanzamiento (año)
Criptomonedas<-rename(Criptomonedas,"Lanzamiento (año)"="Lanzamiento")
#Cambiando los billones y millones por millones
Criptomonedas[,4]<-gsub("21 millones BTC","21",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("Sin límites","N/A",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("100 millones XRP","100",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("1.000 Millones DOTs","1.000",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("84 millones LTC","84",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("200 millones BNB","200",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("21.000.000 BCH","21",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("2.580.109.970 USDt","2.580",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("1 Billón LINKs","1000",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("45.000 millones ADA","45.000",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("Sin datos","0",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("1 billón EOS","1.000",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("18,4 millones XMRs","18.4",Criptomonedas[,4])
Criptomonedas[,4]<-gsub("100.000.000.000 TRX","100.000",Criptomonedas[,4])
#Cambiar Cantidad.maxima por Cantidad.maxima ($) (M)
Criptomonedas<-rename(Criptomonedas,"Cantidad.maxima ($) (M)"="Cantidad.maxima")
#Cambiando numeros como as.nemeric
Criptomonedas[["Cantidad.maxima ($) (M)"]]<-as.numeric(Criptomonedas[["Cantidad.maxima ($) (M)"]])
typeof(Criptomonedas[["Cantidad.maxima ($) (M)"]])
tmp <- Tabla_comparativa[3,]
Tabla_comparativa[3,] <- Tabla_comparativa[2,]
Tabla_comparativa[2,] <- tmp
tmp <- Tabla_comparativa[5,]
Tabla_comparativa[5,] <- Tabla_comparativa[3,]
Tabla_comparativa[3,] <- tmp
tmp <- Tabla_comparativa[4,]
Tabla_comparativa[4,] <- c("Polkadot (DOT)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[5,]
Tabla_comparativa[5,] <- Tabla_comparativa[9,]
Tabla_comparativa[9,] <- tmp
tmp <- Tabla_comparativa[6,]
Tabla_comparativa[6,] <- c("Binance coin (BNB)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[7,]
Tabla_comparativa[7,] <- Tabla_comparativa[9,]
Tabla_comparativa[9,] <- tmp
Tabla_comparativa[9,] <- tmp
tmp <- Tabla_comparativa[8,]
Tabla_comparativa[8,] <- c("Tether (USDt)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[9,]
Tabla_comparativa[9,] <- c("Chainlink (LINK)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[10,]
Tabla_comparativa[10,] <- c("Cardano (ADA)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[11,]
Tabla_comparativa[11,] <- c("Libra",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[12,]
Tabla_comparativa[12,] <- Tabla_comparativa[13,]
Tabla_comparativa[13,] <- tmp
tmp <- Tabla_comparativa[13,]
Tabla_comparativa[13,] <- c("Monero (XMR)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Tabla_comparativa[14,]
Tabla_comparativa[14,] <- Tabla_comparativa[15,]
Tabla_comparativa[15,] <- tmp
tmp <- Tabla_comparativa[15,]
Tabla_comparativa[15,] <- c("Tron (TRX)",NA,NA,NA,NA,NA,NA,NA)
Tabla_comparativa <- rbind(Tabla_comparativa,tmp)
tmp <- Criptomonedas[15,]
Criptomonedas[15,] <- c("Neo (NEO)",NA,NA,NA)
Criptomonedas <- rbind(Criptomonedas,tmp)
tmp <- Criptomonedas[15,]
Criptomonedas[15,] <- Criptomonedas[16,]
Criptomonedas[16,] <- tmp
tmp <- tCPCL[3,]
tCPCL[3,] <- tCPCL[4,]
tCPCL[4,] <- tmp
tmp <- tCPCL[4,]
tCPCL[4,] <- tCPCL[7,]
tCPCL[7,] <- tmp
tmp <- tCPCL[6,]
tCPCL[6,] <- tCPCL[9,]
tCPCL[9,] <- tmp
tmp <- tCPCL[7,]
tCPCL[7,] <- tCPCL[9,]
tCPCL[9,] <- tmp
tmp <- tCPCL[8,]
tCPCL[8,] <- tCPCL[9,]
tCPCL[9,] <- tmp
tmp <- tCPCL[9,]
tCPCL[9,] <- tCPCL[10,]
tCPCL[10,] <- tmp
Libra <- c("Libra",NA,NA,NA,NA,NA,NA,NA)
Eos <- c("Eos","EOS",NA,NA,NA,NA,NA,NA)
Monero <- c("Monero","XMR",NA,NA,NA,NA,NA,NA)
Stellar <- c("Stellar","XLM",NA,NA,NA,NA,NA,NA)
Tron <- c("Tron","TRX",NA,NA,NA,NA,NA,NA)
Neo <- c("Neo","NEO",NA,NA,NA,NA,NA,NA)
tCPCL <- rbind(tCPCL,Libra,Eos,Monero,Stellar,Tron,Neo)
Criptomonedas <- cbind(Criptomonedas,Tabla_comparativa$`Cantidad en circulación (>M)`,Tabla_comparativa$`Ratio de minado/emisión`,
Tabla_comparativa$`Transacciones por sg`,Tabla_comparativa$Red,Tabla_comparativa$`Tiempo para un bloque (sg)`,
tCPCL$`Precio (USD)`,tCPCL$`Vol. (24h)`,tCPCL$`Vol. total`,tCPCL$`Var. (24h)`,tCPCL$`Var. (7d)`)
Criptomonedas <- rename(Criptomonedas, "Capacidad de mercado (%)" = "Capacidad.de.mercado (%)", "Cantidad máxima ($) (M)" = "Cantidad.maxima ($) (M)",
"Cantidad en circulación (>M)" = "Tabla_comparativa$`Cantidad en circulación (>M)`",
"Ratio de minado/emisión" = "Tabla_comparativa$`Ratio de minado/emisión`",
"Transacciones por sg" = "Tabla_comparativa$`Transacciones por sg`",
"Red" = "Tabla_comparativa$Red", "Tiempo para un bloque (sg)" = "Tabla_comparativa$`Tiempo para un bloque (sg)`",
"Precio (USD)" = "tCPCL$`Precio (USD)`", "Vol. (24h) ($) (M)" = "tCPCL$`Vol. (24h)`",
"Vol. Total (%)" = "tCPCL$`Vol. total`", "Var. (24h) (%)" = "tCPCL$`Var. (24h)`",
"Var. (7d) (%)" = "tCPCL$`Var. (7d)`")
#Convalidando informacion perdida
Criptomonedas[16,2] <- Tabla_comparativa[16,2]
Criptomonedas[16,4] <- Tabla_comparativa[16,4]
Criptomonedas[,3] <- as.numeric(Criptomonedas[,3])
Criptomonedas[,4] <- as.numeric(Criptomonedas[,4])
Criptomonedas[,7] <- as.numeric(Criptomonedas[,7])
Criptomonedas[,2] <- as.numeric(Criptomonedas[,2])
Criptomonedas[,5] <- as.numeric(Criptomonedas[,5])
Criptomonedas[,9] <- as.numeric(Criptomonedas[,9])
Criptomonedas[,10] <- as.numeric(Criptomonedas[,10])
Criptomonedas[,11] <- as.numeric(Criptomonedas[,11])
Criptomonedas[,12] <- as.numeric(Criptomonedas[,12])
Criptomonedas[,13] <- as.numeric(Criptomonedas[,13])
Criptomonedas[,14] <- as.numeric(Criptomonedas[,14])
Criptomonedas[,4] <- Criptomonedas[,4] * 1000
Criptomonedas <- Criptomonedas[-11,]
Rows <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
Criptomonedas <- data.frame(Criptomonedas, row.names = Rows)
Headers <- c("Criptomoneda","Lanzamiento (año)","Capacidad de mercado (%)", "Cantidad máxima ($) (M)",
"Cantidad en circulación (>M)", "Ratio de minado/emisión", "Transacciones por sg",
"Red", "Tiempo para un bloque (sg)","Precio (USD)", "Vol. (24h) ($) (M)",
"Vol. Total (%)", "Var. (24h) (%)","Var. (7d) (%)")
colnames(Criptomonedas) <- Headers
Año <- function(Año){
if(Año == "Más reciente"){
Maximo <- max(Criptomonedas$`Lanzamiento (año)`)
Cmax <- c()
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,2] == Maximo)
Cmax <- c(Cmax,Criptomonedas[i,1])
}
print(paste("La criptomoneda con fecha de lanzamiento mas reciente es:", Cmax, ", en el año", Maximo))
}
else if(Año == "Más antigua"){
Minimo <- min(Criptomonedas$`Lanzamiento (año)`)
Cmin <- c()
for (b in 1:nrow(Criptomonedas)) {
if(Criptomonedas[b,2] == Minimo)
Cmin <- c(Cmin,Criptomonedas[b,1])
}
print(paste("La criptomoneda con fecha de lanzamiento mas antigua es:", Cmin, ", en el año", Minimo))
}
}
##Probando dicha funcion
Año("Más reciente")
Cript <- function(a){
ChosenCapacity <- c()
CriptCapacity <- c()
Criptomonedas <- Criptomonedas[-15,]
if(a == "0 - 10%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 0 && Criptomonedas[i,3] <= 10){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "10 - 20%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 10 && Criptomonedas[i,3] <= 20){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "20 - 30%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 20 && Criptomonedas[i,3] <= 30){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "30 - 40%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 30 && Criptomonedas[i,3] <= 40){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "40 - 50%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 40 && Criptomonedas[i,3] <= 50){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "50 - 60%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 50 && Criptomonedas[i,3] <= 60){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "60 - 70%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 60 && Criptomonedas[i,3] <= 70){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "70 - 80%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 70 && Criptomonedas[i,3] <= 80){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "80 - 90%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 80 && Criptomonedas[i,3] <= 90){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
else if(a == "90 - 100%"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,3] >= 90 && Criptomonedas[i,3] <= 100){
ChosenCapacity <- c(ChosenCapacity,Criptomonedas[i,3])
CriptCapacity <- c(CriptCapacity,Criptomonedas[i,1])
}
}
}
print(paste("La criptomoneda con con una capacidad de mercado entre", a, "es:", CriptCapacity, "especificamente con una capacidad de mercado de un", ChosenCapacity, "%"))
}
##Probando funcion
Cript("0 - 10%")
Transg <- function(rango){
SelectedTran <- c()
CorrespondentCript <- c()
Criptomonedas <- Criptomonedas[-c(4,6,8,9,10,12,14),]
if(rango == "0 - 999"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,7] >= 0 && Criptomonedas[i,7] <= 999){
SelectedTran <- c(SelectedTran,Criptomonedas[i,7])
CorrespondentCript <- c(CorrespondentCript,Criptomonedas[i,1])
}
}
}
else if(rango == "1000 - 1999"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,7] >= 1000 && Criptomonedas[i,7] <= 1999){
SelectedTran <- c(SelectedTran,Criptomonedas[i,7])
CorrespondentCript <- c(CorrespondentCript,Criptomonedas[i,1])
}
}
}
else if(rango == "2000 - 2999"){
for (i in 1:nrow(Criptomonedas)) {
if(Criptomonedas[i,7] >= 2000 && Criptomonedas[i,7] <= 2999){
SelectedTran <- c(SelectedTran,Criptomonedas[i,7])
CorrespondentCript <- c(CorrespondentCript,Criptomonedas[i,1])
}
}
}
print(paste("La criptomoneda", CorrespondentCript, "con", SelectedTran,"transacciones por segundo se encuentra en el rango seleccionado de", rango))
}
Transg("2000 - 2999")
TimeBloque <- function(Tiempo){
Criptomonedas <- Criptomonedas[-c(4,6,8,9,10,12,14),]
if(Tiempo == "Mayor"){
Mayor <- max(Criptomonedas$`Tiempo para un bloque (sg)`)
Cmayor <- c()
for (f in 1:nrow(Criptomonedas)) {
if(Criptomonedas[f,9] == Mayor)
Cmayor <- c(Cmayor,Criptomonedas[f,1])
}
print(paste("La criptomoneda con mayor tiempo requerido por bloque es:", Cmayor, ", con un tiempo de", Mayor, "segundos"))
}
else if(Tiempo == "Menor"){
Menor <- min(Criptomonedas$`Tiempo para un bloque (sg)`)
Cmenor <- c()
for (c in 1:nrow(Criptomonedas)) {
if(Criptomonedas[c,2] == Menor)
Cmenor <- c(Cmenor,Criptomonedas[c,1])
}
print(paste("La criptomoneda con menor tiempor requerido por bloque es:", Cmenor, ", con un tiempo de", Menor, "segundos"))
}
}
TimeBloque("Mayor")
Varhr <- function(Coin){
Criptomonedas <- Criptomonedas[-c(11,12,13,14,15),]
if(Coin == "Mayor"){
Biggest <- max(Criptomonedas$`Var. (24h) (%)`)
MonedaMa <- c()
for (z in 1:nrow(Criptomonedas)) {
if(Criptomonedas[z,13] == Biggest){
MonedaMa <- c(MonedaMa,Criptomonedas[z,1])
}
}
print(paste("La criptomoneda con la mayor variacion en 24 horas es:", MonedaMa, "con una variación de un", Biggest, "%"))
}
else if(Coin == "Menor"){
Smaller <- min(Criptomonedas$`Var. (24h) (%)`)
MonedaMe <- c()
for (z in 1:nrow(Criptomonedas)) {
if(Criptomonedas[z,13] == Smaller){
MonedaMe <- c(MonedaMe,Criptomonedas[z,1])
}
}
print(paste("La criptomoneda con la menor variacion en 24 horas es:", MonedaMe, "con una variación de un", Smaller, "%"))
}
}
Varhr("Menor")
Mining <- function(h){
if(h == "12,5 por bloque"){
print(paste("Las criptomonedas con el ratio de minado/emision de", h, "son:",Criptomonedas[1,1] ,"y",Criptomonedas[7,1] ))
}else if(h == "3 por bloque"){
print(paste("La criptomoneda con el ratio de minado/emision de", h, "es:",Criptomonedas[2,1]))
}else if(h == "1.000 millones al mes"){
print(paste("La criptomoneda con el ratio de minado/emision de", h, "es:",Criptomonedas[3,1]))
}else if(h == "25 por bloque"){
print(paste("La criptomoneda con el ratio de minado/emision de", h, "es:",Criptomonedas[5,1]))
}else if(h == "Hasta un 5% de inflación por año"){
print(paste("La criptomoneda con el ratio de minado/emision de", h, "es:",Criptomonedas[11,1]))
}else if(h == "Hasta un 1% de inflación por año"){
print(paste("La criptomoneda con el ratio de minado/emision de", h, "es:",Criptomonedas[13,1]))
}else if(h == "Hasta 15 millones por año"){
print(paste("La criptomoneda con el ratio de minado/emision de", h, "es:",Criptomonedas[15,1]))
}else{
print("No hay criptomoneda alguna con el ratio de minado/emision inidicado")
}
}
##Probando la funcion
Mining("1.000 millones al mes")
#Instalando paquete para la obtencion de la moda
install.packages("modeest")
library("modeest")
MaxYear <- max(Criptomonedas$`Lanzamiento (año)`)
install.packages("modeest")
typeof(Criptomonedas$`Precio (USD)`)
PromedioQuantityMax <- mean(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = TRUE)
MaxYear <- max(Criptomonedas$`Lanzamiento (año)`)
MinYear <- min(Criptomonedas$`Lanzamiento (año)`)
ModaYear <- mfv(Criptomonedas$`Lanzamiento (año)`)
MedianYear <- median(Criptomonedas$`Lanzamiento (año)`, na.rm = TRUE)
PromedioYear <- mean(Criptomonedas$`Lanzamiento (año)`, na.rm = TRUE)
DesvEstYear <- sd(Criptomonedas$`Lanzamiento (año)`, na.rm = TRUE)
VarYear <- var(Criptomonedas$`Lanzamiento (año)`, na.rm = TRUE)
EstLanzamiento <- c(PromedioYear,ModaYear,MedianYear,MaxYear,MinYear,DesvEstYear,VarYear)
PromedioCapacity <- mean(Criptomonedas$`Capacidad de mercado (%)`, na.rm = TRUE)
ModaCapacity <- mfv(Criptomonedas$`Capacidad de mercado (%)`, na_rm = TRUE)
MedianCapacity <- median(Criptomonedas$`Capacidad de mercado (%)`, na.rm = TRUE)
MaxCapacity <- max(Criptomonedas$`Capacidad de mercado (%)`, na.rm = TRUE)
MinCapacity <- min(Criptomonedas$`Capacidad de mercado (%)`, na.rm = TRUE)
DesvEstCapacity <- sd(Criptomonedas$`Capacidad de mercado (%)`, na.rm = TRUE)
VarCapacity <- var(Criptomonedas$`Capacidad de mercado (%)`, na.rm = TRUE)
EstCapacidadMercado <- c(PromedioCapacity,ModaCapacity,MedianCapacity,MaxCapacity,MinCapacity,DesvEstCapacity,VarCapacity)
PromedioQuantityMax <- mean(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = TRUE)
ModaQuantityMax <- mfv(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = TRUE)
library("modeest")
ModaQuantityMax <- mfv(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = TRUE)
ModaQuantityMax
MedianQuantityMax <- median(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = T)
MaxQuantityMax <- max(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = T)
MinQuantityMax <- min(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = T)
DesvEstQuantityMax <- sd(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = T)
VarQuantityMax <- var(Criptomonedas$`Cantidad máxima ($) (M)`, na.rm = T)
EstQuantityMax <- c(PromedioQuantityMax,ModaQuantityMax,MedianQuantityMax,MaxQuantityMax,MinQuantityMax,DesvEstQuantityMax,VarQuantityMax)
PromedioCircQuant <- mean(Criptomonedas$`Cantidad en circulación (>M)`, na.rm = T)
ModaCircQuant <- mfv(Criptomonedas$`Cantidad en circulación (>M)`, na_rm = T)
ModaCircQuant
ModaCircQuant
ModaCircQuant
ModaCircQuant <- mfv(Criptomonedas$`Cantidad en circulación (>M)`, na.rm = T)
